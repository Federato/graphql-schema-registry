# Default values for schema-registry-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image: 
  repository: us-east4-docker.pkg.dev/federato/schema-registry-service/schema-registry-service
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: '0.6.0'

presyncjob:
  enabled: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "schema-registry-service-acct"

podAnnotations:
  'cluster-autoscaler.kubernetes.io/safe-to-evict': 'true'

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsNonRoot: true
  runAsUser: 10001
  capabilities:
    drop:
      - all
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  host: staging.federato.ai
  enabled: true
  annotations:
    'nginx.ingress.kubernetes.io/enable-cors': 'true'
    'nginx.ingress.kubernetes.io/cors-allow-origin': 'http://*.federato.ai,https://*.federato.ai'


# Registry Env Variables

dbHost: schema-registry-service-mysql

dbUsername: federato

dbSecretName: schema-registry-mysql

dbSecretKey: mysql-password

dbPort: 3306

dbName: schema-registry

dbExecuteMigrations: true

redisHost: 192.168.0.4

redisPort: 6379

assetsUrl: https://staging.federato.ai/schema-registry-api

asyncSchemaUpdates: false

nodeEnv: production

mysql:
  enabled: true
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## @param auth.createDatabase Wheter to create the .Values.auth.database or not
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    createDatabase: true
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    database: "schema-registry"
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
    ##
    username: "federato"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: ""
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: "schema-registry-mysql"
